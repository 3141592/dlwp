# Suppress warnings
import os, pathlib
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'

# Force CPU use for keras.
#os.environ["CUDA_DEVICE_ORDER"] = "PCI_BUS_ID"
#os.environ["CUDA_VISIBLE_DEVICES"] = ""

print("11.5 Beyond text classification: Sequence-to-sequence learning")
print("11.5.1 A machine translation example")
print("Parse the file")
text_file = "/root/src/data/spa-eng/spa.txt"
with open(text_file) as f:
    lines = f.read().split("\n")[:-1]
text_pairs = []

# Iterate over the file in lines
for line in lines:
    # Each line contains an English phrase and its Spanish translation, tab-separated.
    english, spanish = line.split("\t")
    # We prepend "[start]" and append "[end]" to the Spanish sentence, to match the template from figure 11.12.
    spanish = "[start] " + spanish + " [end]"
    text_pairs.append((english, spanish))

print("Shuffle and split data into training, validation, and test")
import random
random.shuffle(text_pairs)
num_val_samples = int(0.15 * len(text_pairs))
num_train_samples = len(text_pairs) - 2 * num_val_samples
train_pairs = text_pairs[:num_train_samples]
val_pairs = text_pairs[num_train_samples:num_train_samples + num_val_samples]
test_pairs = text_pairs[num_train_samples + num_val_samples]

print(random.choice(text_pairs))

print("Listing 11.6 Vectorizing the English and Spanish text pairs")
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.layers import Flatten   # to flatten the input data
from tensorflow.keras.layers import Dense     # for the hidden layer
import string
import re

# Hold ALT+168 from keypad
strip_chars = string.punctuation + "Â¿"
strip_chars = strip_chars.replace("[", "")
strip_chars = strip_chars.replace("]", "")

def custom_standardization(input_string):
    lowercase = tf.strings.lower(input_string)
    return tf.strings.regex_replace(
            lowercase, f"[{re.escape(strip_chars)}]", "")

# To keep things simple, we'll only look at the top 15,000 words in each
# language, and we'll restrict sentences to 20 words.
vocab_size = 15000
sequence_length = 20

# The English layer
source_vectorization = layers.TextVectorization(
        max_tokens=vocab_size,
        output_mode="int",
        output_sequence_length=sequence_length,
)
# The Spanish layer
target_vectorization = layers.TextVectorization(
        max_tokens=vocab_size,
        output_mode="int",
        # Generate Spanish sentences that have one extra token,
        # since we'll need to offset the sentence by one step during training.
        output_sequence_length=sequence_length + 1,
        standardize=custom_standardization
)
train_english_texts = [pair[0] for pair in train_pairs]
train_spanish_texts = [pair[1] for pair in train_pairs]
source_vectorization.adapt(train_english_texts)
target_vectorization.adapt(train_spanish_texts)

print("Listing 11.21 Transformer encoder implemented as a subclassed Layer")
import tensorflow as tf

class TransformerEncoder(layers.Layer):
    def __init__(self, embed_dim, dense_dim, num_heads, **kwargs):
        super().__init__(**kwargs)
        # Size of input token vectors
        self.embed_dim = embed_dim
        # Size of tthe inner dense layer
        self.dense_dim = dense_dim
        # Number of attention heads
        self.num_heads = num_heads
        self.attention = layers.MultiHeadAttention(
                num_heads=num_heads,
                key_dim=embed_dim)
        self.dense_proj = keras.Sequential(
                [layers.Dense(dense_dim, activation="relu"),
                 layers.Dense(embed_dim),]
        )
        self.layernorm_1 = layers.LayerNormalization()
        self.layernorm_2 = layers.LayerNormalization()

    # Computation goes in call().
    def call(self, inputs, mask=None):
        # The mask that will be generated by tthe Embedding layer will be 2D,
        # but the attention layer expects to be 3D or 4D, so we expand its rank.
        if mask is not None:
            mask = mask[:, tf.newaxis, :]
        attention_output = self.attention(
                inputs,
                inputs,
                attention_mask=mask)
        proj_input = self.layernorm_1(inputs + attention_output)
        proj_output = self.dense_proj(proj_input)
        return self.layernorm_2(proj_input + proj_output)

    # Implement serialization so we can save the model.
    def get_config(self):
        config = super().get_config()
        config.update({
            "embed_dim": self.embed_dim,
            "num_heads": self.num_heads,
            "dense_dim": self.dense_dim,
        })
        return config

print("Listing 11.24 Implementing positional embedding as a subclassed layer")

class PositionalEmbedding(layers.Layer):
    # A downside of position embeddings is that the sequence
    # length needs to be known in advance.
    def __init__(self, sequence_length, input_dim, output_dim, **kwargs):
        super().__init__(**kwargs)
        # Prepare an embedding layer for the token indices
        self.token_embeddings = layers.Embedding(
                input_dim=input_dim,
                output_dim=output_dim)
        self.position_embeddings = layers.Embedding(
                # And another one for the token positions.
                input_dim=sequence_length,
                output_dim=output_dim)
        self.sequence_length = sequence_length
        self.input_dim = input_dim
        self.output_dim = output_dim

    def call(self, inputs):
        length = tf.shape(inputs)[-1]
        positions = tf.range(start=0, limit=length, delta=1)
        embedded_tokens = self.token_embeddings(inputs)
        embedded_positions = self.position_embeddings(positions)
        return embedded_tokens + embedded_positions

    # Like the Embedding layer, this layer should be able to generate a mask so
    # we can ignore padding zeros in the inputs. The compute_mask method will be
    # called automatically by the framework, and the mask will get propogated
    # to the next layer.
    def compute_mask(self, inputs, mask=None):
        return tf.math.not_equal(inputs, 0)

    # Implement serialization so we can save the model.
    def get_config(self):
        config = super().get_config()
        config.update({
            "output_dim": self.output_dim,
            "sequence_length": self.sequence_length,
            "input_dim": self.input_dim,
        })
        return config

print("Listing 11.27 Preparing datasets for the translation task")
batch_size = 64

def format_dataset(eng, spa):
    eng = source_vectorization(eng)
    spa = target_vectorization(spa)
    return({
        "english": eng,
        # The input Spanish sentence does not include the last token
        # to keep inputs and targets at the same length.
        "spanish": spa[:, :-1],
        # The target Spanish sentence is one step ahead. Both are still the same length.
        }, spa[:, 1:])

def make_dataset(pairs):
    eng_texts, spa_texts = zip(*pairs)
    eng_texts = list(eng_texts)
    spa_texts = list(spa_texts)
    dataset = tf.data.Dataset.from_tensor_slices((eng_texts, spa_texts))
    dataset = dataset.batch(batch_size)
    dataset = dataset.map(format_dataset, num_parallel_calls=tf.data.AUTOTUNE)
    # Use in-memory caching to speed up preprocessing.
    return dataset.shuffle(2048).prefetch(16).cache()

train_ds = make_dataset(train_pairs)
val_ds = make_dataset(val_pairs)

print("Here's what our dataset outputs look like:")
for inputs, targets in train_ds.take(1):
    print(f"inputs['english'].shape: {inputs['english'].shape}")
    print(f"inputs['spanish'].shape: {inputs['spanish'].shape}")
    print(f"targets.shape: {targets.shape}")

print("Listing 11.28 GRU-based encoder")

embed_dim = 256
latent_dim = 1024

# The English source sentence goes here. Specifying the name of the input
# enables us to fit() the model with a dict of inputs.
source = keras.Input(shape=(None,), dtype="int64", name="english")
# Don't forget masking: it's critical in this setup.
x = layers.Embedding(vocab_size, embed_dim, mask_zero=True)(source)
# Our encoded source sentence is the last output of a bidirectional GRU.
encoded_source = layers.Bidirectional(layers.GRU(latent_dim), merge_mode="sum")(x)

print("Listing 11.29 GRU-based decoder and the end-to-end model")

# The Spanish target goes here
past_target = keras.Input(shape=(None,), dtype="int64", name="spanish")
# Don't forget masking
x = layers.Embedding(vocab_size, embed_dim, mask_zero=True)(past_target)
decoder_gru = layers.GRU(latent_dim, return_sequences=True)
# The encoded source sentence serves as the initial state of the decoder GRU.
x = decoder_gru(x, initial_state=encoded_source)
x = layers.Dropout(0.5)(x)
# Predicts the next token
target_next_step = layers.Dense(vocab_size, activation="softmax")(x)
# End-to-end model: maps the source sentence and the target sentence to the target sentence one step in the future
seq2seq_rnn = keras.Model([source, past_target], target_next_step)
seq2seq_rnn.summary()

#print("Listing 11.30 Training our recurrent sequence-to-sequence model")
seq2seq_rnn.compile(
        optimizer="rmsprop",
        loss="sparse_categorical_crossentropy",
        metrics=["accuracy"])
#seq2seq_rnn.fit(train_ds, epochs=15, validation_data=val_ds)

#print("Listing 11.31 Translating new sentences with our RNN encoder and decoder")
import numpy as np
# Prepare a dict to convert token index predictions to string tokens.
spa_vocab = target_vectorization.get_vocabulary()
spa_index_lookup = dict(zip(range(len(spa_vocab)), spa_vocab))
max_decoded_sentence_length = 20

def decode_sequence(input_sentence):
    tokenized_input_sequence = source_vectorization([input_sentence])
    # Seed token
    decoded_sentence = "[start]"
    for i in range(max_decoded_sentence_length):
        tokenized_target_sequence = target_vectorization([decoded_sentence])
        # Sample the next token.
        next_token_predictions = seq2seq_rnn.predict(
                [tokenized_input_sequence, tokenized_target_sequence])
        sampled_token_index = np.argmax(next_token_predictions[0, i, :])
        # Convert the next token prediction to a string and append it to the generated sentence.
        sampled_token = spa_index_lookup[sampled_token_index]
        decoded_sentence += " " + sampled_token
        # Exit condition: either hit max length or sample a stop character
        if sampled_token == "[end]":
            break
    return decoded_sentence

test_eng_texts = [pair[0] for pair in test_pairs]
#for _ in range(20):
#    input_sentence = random.choice(test_eng_texts)
#    print("-")
#    print(input_sentence)
#    print(decode_sequence(input_sentence))

print("Listing 11.33 The TransformerDecoder")
class TransformerDecoder(layers.Layer):
    def __init__(self, embed_dim, dense_dim, num_heads, **kwargs):
        super().__init__(**kwargs)
        self.embed_dim = embed_dim
        self.dense_dim = dense_dim
        self.num_heads = num_heads
        self.attention_1 = layers.MultiHeadAttention(
                num_heads=num_heads,
                key_dim= embed_dim)
        self.attention_2 = layers.MultiHeadAttention(
                num_heads=num_heads,
                key_dim= embed_dim)
        self.dense_proj = keras.Sequential(
                [layers.Dense(dense_dim, activation="relu"),
                 layers.Dense(embed_dim),]
                )
        self.layernorm_1 = layers.LayerNormalization()
        self.layernorm_2 = layers.LayerNormalization()
        self.layernorm_3 = layers.LayerNormalization()
        # This attribute ensures that the layer will propogate its input mask to its outputs.
        # If you pass a mask to a layer that doesn't implement compute_mask() and that doesn't
        # expose this supports_masking attribute, that's an error.
        self.supports_masking = True

    def get_config(self):
        config = super().get_config()
        config.update({
            "embed_dim": self.embed_dim,
            "num_heads": self.num_heads,
            "dense_dim": self.dense_dim,
            })
        return config

print("Listing 11.34 TransformerDecoder method that generates a causal mask")
def get_causal_attention_mask(self, inputs):
    input_shape = tf.shape(inputs)
    batch_size, sequence_length = input_shape[0], input_shape[1]
    i = tf.range(sequence_length)[:, tf.newaxis]
    j = tf.range(sequence_length)
    mask = tf.cast(i >= j, dtype="int32")
    mask = tf.reshape(mask, (1, input_shape[1], input_shape[1]))
    mult = tf.concat(
            [tf.expand_dims(batch_size, -1),
             tf.constant([1, 1], dtype=tf.int32)], axis=0)
    return tf.tile(mask, mult)

print("Listing 11.35 The forward pass of the TransformerDecoder")
def call(self, inputs, encoder_outputs, mask=None):
    # Retrieve the causal mask
    causal_mask = self.get_causal_attention_mask(inputs)
    # Prepare input mask
    if mask is not None:
        padding_mask = tf.cast(
                mask[:, tf.newaxis, :], dtype="int32")
        # Merge the two masks together
        padding_mask = tf.minimum(padding_mask, causal_mask)
    attention_output_1 = self.attention_1(
        query=inputs,
        value=inputs,
        key=inputs,
        # Pass causal mask to first attention layer
        attention_mask=causal_mask)
    attention_output_1 = self.layernorm_1(inputs + attention_output_1)
    attention_output_2 = self.attention_2(
        query=attention_output_1,
        value=encoder_outputs,
        key=encoder_outputs,
        # Pass causal mask to first attention layer
        attention_mask=padding_mask)
    attention_output_2 = self.layernorm_2(attention_output_1 + attention_output_2)
    proj_output = self.dense_proj(attention_output_2)
    return self.layernorm_3(attention_output_2 + proj_output)

print("11.36 End-to-end Transformer")
embed_dim = 256
dense_dim = 2048
num_heads = 8

encoder_inputs = keras.Input(shape=(None,), dtype="int64", name="english")
x = PositionalEmbedding(sequence_length, vocab_size, embed_dim)(encoder_inputs)
# Encode the source sentence
encoder_outputs = TransformerEncoder(embed_dim, dense_dim, num_heads)(x)

decoder_inputs = keras.Input(shape=(None,), dtype="int64", name="spanish")
x = PositionalEmbedding(sequence_length, vocab_size, embed_dim)(decoder_inputs)
# Encode the target sentence and combine it with the encoded source sentence.
x = TransformerDecoder(embed_dim, dense_dim, num_heads)(x, encoder_outputs)
x = layers.Dropout(0.5) (x)

decoder_outputs = layers.Dense(vocab_size, activation="softmax")(x)
# Predict a word for each output position.
transformer = keras.Model([encoder_inputs, decoder_inputs], decoder_outputs)

print("Listing 11.37 Training the sequence-to-sequence Transformer")
transformer.compile(
        optimizer="rmsprop",
        loss="sparse_categorical_crossentropy",
        metrics=["accuracy"])
transformer.fit(train_ds, epochs=3, validation_data=val_ds)
#transformer.summary()
